from langchain.chains import LLMChain
from langchain_groq import ChatGroq
from langchain_core.prompts import PromptTemplate
import os
from dotenv import load_dotenv
import re
from services.scrape_url import scrape_product_page
import asyncio
class AdScriptGenerator:
    def __init__(self):
        # Load environment variables
        load_dotenv()

        # Define prompt template
        self.prompt = PromptTemplate.from_template("""
You are an AI assistant acting as a creative copywriter for product advertisements.

You will be given product data such as title, price, description, and bullet points.
Your job is to write a 15–30 seconds short, engaging, and professional **video ad script** in the following format:

[CHEERFUL MUSIC BEGINS]
"Attention-grabbing opening line here."

[INTRO / PRODUCT SHOT]
"Quick overview of the product and its main benefit."

[HIGHLIGHT FEATURES]
"Feature 1 from bullet points. Feature 2. Why it matters to the user."

[PRICE SLIDE]
"Current price: {price_data}. Great value for what you get!"

[FINAL CTA]
"Call-to-action: Hurry! Limited stock. Click 'Add to Cart' now before it's gone!"
[MUSIC FADES OUT]
avoid writing Narrator (VO) in the script, just write the script as it is.

Make sure:
- Each section starts with a visual marker like [INTRO], [FEATURES], etc.
- Narrator lines are marked with `**NARRATOR (VO):**`
- Text is concise and fits short video scenes (2–5 seconds per section)
- Avoid markdown — return plain text
- An attention-grabbing opening line
- A quick overview of the product and its benefits
- Highlight key features from the bullet points
- End with a strong call-to-action encouraging viewers to buy now

Product Data:
    title: {title}
    price: {price_data}
    description: {description}
    bullet points: {bullet_points}
""")

        # Initialize model
        self.llm = ChatGroq(
            model="qwen-qwq-32b",
            api_key=os.getenv("GROQ_API_KEY"),
            temperature=0.7,
        )

        # Create chain
        self.chain = LLMChain(llm=self.llm, prompt=self.prompt)

    async def generate_script(self, url: str) -> str:
        """
        Generates a video ad script based on the provided product data.

        :param product_data: Dictionary containing title, price_data, description, bullet_points
        :return: Cleaned ad script as string
        """
        try:
            
            product_data =  scrape_product_page(url)
            # if product_data["error"] is not None:
            #     return {"error": product_data["error"]}
            print(product_data)
            response = self.chain.invoke(product_data)
            raw_script = response["text"]
            cleaned_script = self.__clean_response(raw_script)
            return {"script": cleaned_script,"images": product_data["images"]}
        except Exception as e:
            return {"error": str(e)}

    def __clean_response(self, text: str) -> str:
        """
        Post-processes the LLM output to remove unwanted content.

        :param text: Raw script generated by the LLM
        :return: Cleaned script
        """
        cleaned_text = re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)
        return cleaned_text.strip()






